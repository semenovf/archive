.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Class::Accessor::Validated 3pm"
.TH Class::Accessor::Validated 3pm "2011-08-10" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  Class::Accessor::Validated \- Automated accessor generation with validation support for mutators
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  package Foo;
\&  use base qw(Class::Accessor::Validated);
\&  Foo\->follow_best_practice;
\&  Foo\->mk_accessors(
\&    \*(Aqinteger\*(Aq  => sub { $ =~ /^\ed+$/ },
\&    \*(Aqfloat\*(Aq    => sub { $ =~ /^\ed*\e.\ed+$/ },
\&    \*(Aqid\*(Aq       => sub { length($_) == 64 && $ =~ /[a\-zA\-Z0\-9]/ }
\&  );
\&  
\&  package Bar;
\&  use base qw(Class::Accessor::Validated);
\&  Bar\->mk_accessors(
\&    \*(Aqein\*(Aq  => sub { 1 },
\&    \*(Aqzwei\*(Aq => sub { 1 },
\&    \*(Aqdrei\*(Aq => sub { 1 }
\&  );
\&
\&  package Baz;
\&  use base qw(Class::Accessor);
\&  Baz\->mk_accessors( qw(ein, zwei drei) );
\&
\&  # Bar and Baz are equivalent
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module automagically generates accessors/mutators for your class
with validation support for mutators.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright 2011 Fedor Semenov <fedor.v.semenov@gmail.com>
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Class::Accessor module.
Fully derived from the code of Class::Accessor, except a bit of code linked to validation.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
See Class::Accessor.
.SH "MAKING ACCESSORS"
.IX Header "MAKING ACCESSORS"
.SS "mk_accessors"
.IX Subsection "mk_accessors"
.Vb 1
\&    _\|_PACKAGE_\|_\->mk_accessors(%rw_specs);
.Ve
.PP
This creates accessor/mutator methods for each named field given by
\&\f(CW%rw_specs\fR keys.
.PP
.Vb 4
\&    # Generates foo(), _foo_accessor(), bar() and _bar_accessor().
\&    _\|_PACKAGE_\|_\->mk_accessors(
\&        \*(Aqfoo\*(Aq => sub { is_it_really_foo() },
\&        \*(Aqbar\*(Aq => sub { is_it_really_bar() } );
.Ve
.SS "mk_ro_accessors"
.IX Subsection "mk_ro_accessors"
.Vb 1
\&  _\|_PACKAGE_\|_\->mk_wo_accessors(%write_only_specs);
.Ve
.PP
Generates read-only accessors.
.SS "mk_wo_accessors"
.IX Subsection "mk_wo_accessors"
.Vb 1
\&  _\|_PACKAGE_\|_\->mk_wo_accessors(%write_only_specs);
.Ve
.PP
Generates write-only accessors (ie. mutators).
.SH "DETAILS"
.IX Header "DETAILS"
.SS "make_accessor"
.IX Subsection "make_accessor"
.Vb 1
\&    $accessor = _\|_PACKAGE_\|_\->make_accessor($field, $func);
.Ve
.PP
Generates a subroutine reference which acts as an accessor for the given
\&\f(CW$field\fR with validator set to \f(CW$func\fR.
.SS "make_wo_accessor"
.IX Subsection "make_wo_accessor"
.Vb 1
\&    $read_only_accessor = _\|_PACKAGE_\|_\->make_wo_accessor($field, $func);
.Ve
.PP
Generates a subroutine refrence which acts as a write-only accessor
(mutator) for the given \f(CW$field\fR with validator set to \f(CW$func\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See Class::Accessor, Class::Accessor::Fast and Class::Accessor::Faster.
Also Validator::Var.
