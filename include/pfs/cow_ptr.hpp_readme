// see http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Copy-on-write
// http://stackoverflow.com/questions/2349871/why-is-there-no-boostcopy-on-write-ptr
// http://stackoverflow.com/questions/6245235/confusion-about-copy-on-write-and-shared-ptr

/**
 * @file: cow_ptr.hpp
 * @author wladt
 * @date Nov 22, 2013
 */

#ifndef __PFS_COW_PTR_HPP__
#define __PFS_COW_PTR_HPP__

#include <pfs/shared_ptr.hpp>

namespace pfs {

template <class T>
class cow_ptr
{
public:
	typedef shared_ptr<T> value_type;

private:
	value_type _sp;

	void detach()
	{
		T * tmp = _sp.get();
		if( !( tmp == 0 || _sp.unique() ) ) {
			_sp = value_type( new T( *tmp ) );
		}
	}

public:
	cow_ptr (T * t) : _sp(t) {}
	cow_ptr (const value_type & refptr) : _sp(refptr) {}
	cow_ptr (const cow_ptr & other) : _sp(other._sp) {}
	cow_ptr & operator = (const cow_ptr & other)
    {
		_sp = other._sp; // no need to check for self-assignment with boost::shared_ptr
		return *this;
    }

	const T & operator * () const
    {
		return *_sp;
    }

	T & operator * ()
    {
		detach();
		return *_sp;
    }

	const T * operator -> () const
	{
		return _sp.operator->();
	}

	T * operator -> ()
	{
		detach();
		return _sp.operator->();
	}
};

} // pfs

#endif /* __PFS_COW_PTR_HPP__ */
