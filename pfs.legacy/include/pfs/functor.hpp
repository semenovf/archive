/* AUTOMATICALLY GENERATED BY 'functor_gen.pl' */
/*
 * functor.hpp
 *
 *  Created on: 2016-02-12 15:32:04
 *      Author: wladt
 */

// TODO DEPRECATED, USE binder (binder.hpp) instead

#ifndef __PFS_FUNCTOR_HPP__
#define __PFS_FUNCTOR_HPP__

namespace pfs {

template <typename T>
struct base_type_trait { typedef T type; };

template <typename T>
struct base_type_trait<const T &> { typedef T type; };

template <typename Return>
class functor_base
{
public:
    typedef Return return_type;

protected:
    size_t _size;

    functor_base (size_t size)
        : _size(size)
    {}

public:
    virtual ~functor_base () {}

    size_t size () const
    {
        return _size;
    }

    virtual return_type operator () () const = 0;
};


template <typename Return>
class functor_func_base : public functor_base<Return>
{
public:
    typedef Return return_type;
    typedef return_type (* funcptr_type) ();

protected:
    funcptr_type _f;

    functor_func_base (size_t size, funcptr_type f)
        : functor_base<Return>(size)
        , _f(f)
    {}

public:
    virtual ~functor_func_base () {}

    virtual return_type operator () () const = 0;
};

template <typename Class, typename Return>
class functor_method_base : public functor_base<Return>
{
public:
    typedef Return return_type;
    typedef return_type (Class::* funcptr_type) ();

protected:
    Class * _p;
    funcptr_type _f;

    functor_method_base (size_t size, Class * p, funcptr_type f)
        : functor_base<Return>(size)
        , _p(p)
        , _f(f)
    { }

public:
    virtual ~functor_method_base () {}

    virtual return_type operator () () const = 0;
};


template <typename Return>
class functor0 : public functor_func_base<Return>
{

public:
    typedef functor_func_base<Return> base_class;
    typedef Return return_type;
    typedef return_type (* funcptr_type) ();

    functor0 (funcptr_type f)
        : base_class(sizeof(functor0)
                , reinterpret_cast<typename base_class::funcptr_type>(f))
    {}

    virtual ~functor0 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return f();
    }
};

template <typename Return, typename Arg1>
class functor1 : public functor_func_base<Return>
{
    typename base_type_trait<Arg1>::type _a1;

public:
    typedef functor_func_base<Return> base_class;
    typedef Return return_type;
    typedef return_type (* funcptr_type) (Arg1);

    functor1 (funcptr_type f, Arg1 a1)
        : base_class(sizeof(functor1)
                , reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
    {}

    virtual ~functor1 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return f(_a1);
    }
};

template <typename Return, typename Arg1, typename Arg2>
class functor2 : public functor_func_base<Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;

public:
    typedef functor_func_base<Return> base_class;
    typedef Return return_type;
    typedef return_type (* funcptr_type) (Arg1, Arg2);

    functor2 (funcptr_type f, Arg1 a1, Arg2 a2)
        : base_class(sizeof(functor2)
                , reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
    {}

    virtual ~functor2 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return f(_a1, _a2);
    }
};

template <typename Return, typename Arg1, typename Arg2, typename Arg3>
class functor3 : public functor_func_base<Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;
    typename base_type_trait<Arg3>::type _a3;

public:
    typedef functor_func_base<Return> base_class;
    typedef Return return_type;
    typedef return_type (* funcptr_type) (Arg1, Arg2, Arg3);

    functor3 (funcptr_type f, Arg1 a1, Arg2 a2, Arg3 a3)
        : base_class(sizeof(functor3)
                , reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
        , _a3(a3)
    {}

    virtual ~functor3 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return f(_a1, _a2, _a3);
    }
};

template <typename Return, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class functor4 : public functor_func_base<Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;
    typename base_type_trait<Arg3>::type _a3;
    typename base_type_trait<Arg4>::type _a4;

public:
    typedef functor_func_base<Return> base_class;
    typedef Return return_type;
    typedef return_type (* funcptr_type) (Arg1, Arg2, Arg3, Arg4);

    functor4 (funcptr_type f, Arg1 a1, Arg2 a2, Arg3 a3, Arg4 a4)
        : base_class(sizeof(functor4)
                , reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
        , _a3(a3)
        , _a4(a4)
    {}

    virtual ~functor4 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return f(_a1, _a2, _a3, _a4);
    }
};

template <typename Return, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class functor5 : public functor_func_base<Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;
    typename base_type_trait<Arg3>::type _a3;
    typename base_type_trait<Arg4>::type _a4;
    typename base_type_trait<Arg5>::type _a5;

public:
    typedef functor_func_base<Return> base_class;
    typedef Return return_type;
    typedef return_type (* funcptr_type) (Arg1, Arg2, Arg3, Arg4, Arg5);

    functor5 (funcptr_type f, Arg1 a1, Arg2 a2, Arg3 a3, Arg4 a4, Arg5 a5)
        : base_class(sizeof(functor5)
                , reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
        , _a3(a3)
        , _a4(a4)
        , _a5(a5)
    {}

    virtual ~functor5 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return f(_a1, _a2, _a3, _a4, _a5);
    }
};

template <typename Return, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class functor6 : public functor_func_base<Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;
    typename base_type_trait<Arg3>::type _a3;
    typename base_type_trait<Arg4>::type _a4;
    typename base_type_trait<Arg5>::type _a5;
    typename base_type_trait<Arg6>::type _a6;

public:
    typedef functor_func_base<Return> base_class;
    typedef Return return_type;
    typedef return_type (* funcptr_type) (Arg1, Arg2, Arg3, Arg4, Arg5, Arg6);

    functor6 (funcptr_type f, Arg1 a1, Arg2 a2, Arg3 a3, Arg4 a4, Arg5 a5, Arg6 a6)
        : base_class(sizeof(functor6)
                , reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
        , _a3(a3)
        , _a4(a4)
        , _a5(a5)
        , _a6(a6)
    {}

    virtual ~functor6 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return f(_a1, _a2, _a3, _a4, _a5, _a6);
    }
};

template <typename Return, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
class functor7 : public functor_func_base<Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;
    typename base_type_trait<Arg3>::type _a3;
    typename base_type_trait<Arg4>::type _a4;
    typename base_type_trait<Arg5>::type _a5;
    typename base_type_trait<Arg6>::type _a6;
    typename base_type_trait<Arg7>::type _a7;

public:
    typedef functor_func_base<Return> base_class;
    typedef Return return_type;
    typedef return_type (* funcptr_type) (Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7);

    functor7 (funcptr_type f, Arg1 a1, Arg2 a2, Arg3 a3, Arg4 a4, Arg5 a5, Arg6 a6, Arg7 a7)
        : base_class(sizeof(functor7)
                , reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
        , _a3(a3)
        , _a4(a4)
        , _a5(a5)
        , _a6(a6)
        , _a7(a7)
    {}

    virtual ~functor7 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return f(_a1, _a2, _a3, _a4, _a5, _a6, _a7);
    }
};

template <typename Return, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
class functor8 : public functor_func_base<Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;
    typename base_type_trait<Arg3>::type _a3;
    typename base_type_trait<Arg4>::type _a4;
    typename base_type_trait<Arg5>::type _a5;
    typename base_type_trait<Arg6>::type _a6;
    typename base_type_trait<Arg7>::type _a7;
    typename base_type_trait<Arg8>::type _a8;

public:
    typedef functor_func_base<Return> base_class;
    typedef Return return_type;
    typedef return_type (* funcptr_type) (Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8);

    functor8 (funcptr_type f, Arg1 a1, Arg2 a2, Arg3 a3, Arg4 a4, Arg5 a5, Arg6 a6, Arg7 a7, Arg8 a8)
        : base_class(sizeof(functor8)
                , reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
        , _a3(a3)
        , _a4(a4)
        , _a5(a5)
        , _a6(a6)
        , _a7(a7)
        , _a8(a8)
    {}

    virtual ~functor8 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return f(_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8);
    }
};

template <typename Class, typename Return>
class functor_method0 : public functor_method_base<Class, Return>
{

public:
    typedef functor_method_base<Class, Return> base_class;
    typedef Return return_type;
    typedef return_type (Class::* funcptr_type) ();

    functor_method0 (Class * p, funcptr_type f)
        : base_class(sizeof(functor_method0)
                , p, reinterpret_cast<typename base_class::funcptr_type>(f))
    {}

    virtual ~functor_method0 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return (base_class::_p->*f)();
    }
};

template <typename Class, typename Return, typename Arg1>
class functor_method1 : public functor_method_base<Class, Return>
{
    typename base_type_trait<Arg1>::type _a1;

public:
    typedef functor_method_base<Class, Return> base_class;
    typedef Return return_type;
    typedef return_type (Class::* funcptr_type) (Arg1);

    functor_method1 (Class * p, funcptr_type f, Arg1 a1)
        : base_class(sizeof(functor_method1)
                , p, reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
    {}

    virtual ~functor_method1 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return (base_class::_p->*f)(_a1);
    }
};

template <typename Class, typename Return, typename Arg1, typename Arg2>
class functor_method2 : public functor_method_base<Class, Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;

public:
    typedef functor_method_base<Class, Return> base_class;
    typedef Return return_type;
    typedef return_type (Class::* funcptr_type) (Arg1, Arg2);

    functor_method2 (Class * p, funcptr_type f, Arg1 a1, Arg2 a2)
        : base_class(sizeof(functor_method2)
                , p, reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
    {}

    virtual ~functor_method2 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return (base_class::_p->*f)(_a1, _a2);
    }
};

template <typename Class, typename Return, typename Arg1, typename Arg2, typename Arg3>
class functor_method3 : public functor_method_base<Class, Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;
    typename base_type_trait<Arg3>::type _a3;

public:
    typedef functor_method_base<Class, Return> base_class;
    typedef Return return_type;
    typedef return_type (Class::* funcptr_type) (Arg1, Arg2, Arg3);

    functor_method3 (Class * p, funcptr_type f, Arg1 a1, Arg2 a2, Arg3 a3)
        : base_class(sizeof(functor_method3)
                , p, reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
        , _a3(a3)
    {}

    virtual ~functor_method3 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return (base_class::_p->*f)(_a1, _a2, _a3);
    }
};

template <typename Class, typename Return, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class functor_method4 : public functor_method_base<Class, Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;
    typename base_type_trait<Arg3>::type _a3;
    typename base_type_trait<Arg4>::type _a4;

public:
    typedef functor_method_base<Class, Return> base_class;
    typedef Return return_type;
    typedef return_type (Class::* funcptr_type) (Arg1, Arg2, Arg3, Arg4);

    functor_method4 (Class * p, funcptr_type f, Arg1 a1, Arg2 a2, Arg3 a3, Arg4 a4)
        : base_class(sizeof(functor_method4)
                , p, reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
        , _a3(a3)
        , _a4(a4)
    {}

    virtual ~functor_method4 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return (base_class::_p->*f)(_a1, _a2, _a3, _a4);
    }
};

template <typename Class, typename Return, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class functor_method5 : public functor_method_base<Class, Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;
    typename base_type_trait<Arg3>::type _a3;
    typename base_type_trait<Arg4>::type _a4;
    typename base_type_trait<Arg5>::type _a5;

public:
    typedef functor_method_base<Class, Return> base_class;
    typedef Return return_type;
    typedef return_type (Class::* funcptr_type) (Arg1, Arg2, Arg3, Arg4, Arg5);

    functor_method5 (Class * p, funcptr_type f, Arg1 a1, Arg2 a2, Arg3 a3, Arg4 a4, Arg5 a5)
        : base_class(sizeof(functor_method5)
                , p, reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
        , _a3(a3)
        , _a4(a4)
        , _a5(a5)
    {}

    virtual ~functor_method5 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return (base_class::_p->*f)(_a1, _a2, _a3, _a4, _a5);
    }
};

template <typename Class, typename Return, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class functor_method6 : public functor_method_base<Class, Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;
    typename base_type_trait<Arg3>::type _a3;
    typename base_type_trait<Arg4>::type _a4;
    typename base_type_trait<Arg5>::type _a5;
    typename base_type_trait<Arg6>::type _a6;

public:
    typedef functor_method_base<Class, Return> base_class;
    typedef Return return_type;
    typedef return_type (Class::* funcptr_type) (Arg1, Arg2, Arg3, Arg4, Arg5, Arg6);

    functor_method6 (Class * p, funcptr_type f, Arg1 a1, Arg2 a2, Arg3 a3, Arg4 a4, Arg5 a5, Arg6 a6)
        : base_class(sizeof(functor_method6)
                , p, reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
        , _a3(a3)
        , _a4(a4)
        , _a5(a5)
        , _a6(a6)
    {}

    virtual ~functor_method6 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return (base_class::_p->*f)(_a1, _a2, _a3, _a4, _a5, _a6);
    }
};

template <typename Class, typename Return, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
class functor_method7 : public functor_method_base<Class, Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;
    typename base_type_trait<Arg3>::type _a3;
    typename base_type_trait<Arg4>::type _a4;
    typename base_type_trait<Arg5>::type _a5;
    typename base_type_trait<Arg6>::type _a6;
    typename base_type_trait<Arg7>::type _a7;

public:
    typedef functor_method_base<Class, Return> base_class;
    typedef Return return_type;
    typedef return_type (Class::* funcptr_type) (Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7);

    functor_method7 (Class * p, funcptr_type f, Arg1 a1, Arg2 a2, Arg3 a3, Arg4 a4, Arg5 a5, Arg6 a6, Arg7 a7)
        : base_class(sizeof(functor_method7)
                , p, reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
        , _a3(a3)
        , _a4(a4)
        , _a5(a5)
        , _a6(a6)
        , _a7(a7)
    {}

    virtual ~functor_method7 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return (base_class::_p->*f)(_a1, _a2, _a3, _a4, _a5, _a6, _a7);
    }
};

template <typename Class, typename Return, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
class functor_method8 : public functor_method_base<Class, Return>
{
    typename base_type_trait<Arg1>::type _a1;
    typename base_type_trait<Arg2>::type _a2;
    typename base_type_trait<Arg3>::type _a3;
    typename base_type_trait<Arg4>::type _a4;
    typename base_type_trait<Arg5>::type _a5;
    typename base_type_trait<Arg6>::type _a6;
    typename base_type_trait<Arg7>::type _a7;
    typename base_type_trait<Arg8>::type _a8;

public:
    typedef functor_method_base<Class, Return> base_class;
    typedef Return return_type;
    typedef return_type (Class::* funcptr_type) (Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8);

    functor_method8 (Class * p, funcptr_type f, Arg1 a1, Arg2 a2, Arg3 a3, Arg4 a4, Arg5 a5, Arg6 a6, Arg7 a7, Arg8 a8)
        : base_class(sizeof(functor_method8)
                , p, reinterpret_cast<typename base_class::funcptr_type>(f))
        , _a1(a1)
        , _a2(a2)
        , _a3(a3)
        , _a4(a4)
        , _a5(a5)
        , _a6(a6)
        , _a7(a7)
        , _a8(a8)
    {}

    virtual ~functor_method8 () {}

    virtual return_type operator () () const
    {
        funcptr_type f = reinterpret_cast<funcptr_type>(this->_f);
        return (base_class::_p->*f)(_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8);
    }
};


} // pfs

#endif /* __PFS_FUNCTOR_HPP__ */

