/*
 * udp_server_unix.cpp
 *
 *  Created on: Jun 25, 2015
 *      Author: wladt
 */

#include "inet_socket_posix.hpp"

namespace pfs { namespace io {

bool udp_server::opened () const
{
    if (_d.isNull() || _d.cast<udp_socket_impl>()->_sockfd < 0)
		return false;
    return true;
}

bool udp_server::open (const inet4_addr & addr, int32_t oflags)
{
    if (opened()) {
		this->addError(_u8("UDP socket: already opened"));
		return false;
    }

	udp_socket_impl * simpl = new udp_socket_impl;

	if (!simpl->open(addr, oflags, *this)) {
		delete simpl;
		return false;
	}

	pimpl d(simpl);
	_d.swap(d);

	return true;
}

bool udp_server::accept (udp_socket * sock)
{
	if (!opened())
		return false;

	udp_socket_impl * d = _d.cast<udp_socket_impl>();

	sockaddr_in sockaddr;
	ssize_t n = d->recvfrom(& sockaddr);

	if (n < 0)
		return false;

	if (sock) {
		pimpl peer(new udp_socket_peer_impl(d->_sockfd, sockaddr, d->_ibuf, static_cast<size_t>(n)));
		d->_icount = 0;
		sock->_d.swap(peer);
	}

	return true;
}

inet4_addr udp_server::address () const
{
    if (!opened())
        return inet4_addr();

    const udp_socket_impl * d = _d.cast<udp_socket_impl>();
    return inet4_addr(ntohl(d->_sockaddr.sin_addr.s_addr), ntohs(d->_sockaddr.sin_port));
}


}} // pfs::io


